@model PaginatedList<WebApp.Models.Subject>
<!--reference to the PaginatedList model created for paging-->
@{
    ViewData["Title"] = "Index";
}

<h1 class=" info">Subject List</h1>
<!--this class="info" will change the text colour white because the background is black-->
<p>
    <a asp-action="Create">Create New</a>
    <!--this is the button goes to the create form-->
</p>
@using (Html.BeginForm("Index", "Subjects", FormMethod.Get))
{
    <p class="info">
        Search for subject: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <!--search box. this will make a box where the user can enter whatever they want to search-->
        <input type="submit" value="Search" />
        <!--this will submit whatever the user is searching-->
        <a asp-action="Index">Back to Full List</a>
        <!--the text "Back to Full List" will be the link to reset the search-->
    </p>
}
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.ActionLink("Subject Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
            </th>
            <!--this will be the name of the column and the link to sort the subject name in descending order-->
            <th>
                Picture
            </th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.SubjectName)
            </td>
             
                 <td>
                   <img src="@("~/images/"+item.ImageName)" asp-append-version="true" width="75px" height="75px"/>
                </td> 
                <!--this will give the user the option to upload an image.
                                        The image will appear 75px width and height, will be saved under ImageName in the subject table-->
            <td>
                <a asp-action="Edit" asp-route-id="@item.SubjectID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.SubjectID">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.SubjectID">Delete</a>
            </td>
        </tr>
}
        <!--cards= each card created for the staff it will be filled in rows and it repeats.-->
        <div class="flex-container">
            @foreach (var items in Model)
            {
                <!--image-->
                <div class="card" style="width: 18rem;">
                    <img class="card-img-top image-card" src="@("~/images/"+items.ImageName)" asp-append-version="true" alt="Card image cap" style="object-fit: cover;">
                    <div class="card-body">
                        <h5 class="card-title">
                            <!--under the image will be the subject name-->
                            @Html.DisplayFor(modelItem => items.SubjectName)
                           
                        </h5>
                        <!--this is a button-->
                        <a href="#" class="btn btn-primary">View</a>
                    </div>
                </div>
            }
           
                }
            </div>
        </div>
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}
<!--paging buttons. The previous and next buttons,
if the previous or next page isnt available, that button will be disabled-->
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default gree info @prevDisabled">
    <!--the 'info'' class is there to change the text colour white.
     I noticed how the btn btn-default class makes it so when the user hovers over a button,
     the button colour gets darker which is too similar to the text colour.
     I created the class 'gree' to chnage the text colour text when hover.-->
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default gree info @nextDisabled">
    Next
</a> 