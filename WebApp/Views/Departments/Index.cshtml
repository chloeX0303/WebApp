@model PaginatedList<WebApp.Models.Department>

@{
    ViewData["Title"] = "Department";
}

<h1 class=" info">Department List</h1>
<!--this class="info" will change the text colour white-->

<p>
    <a asp-action="Create">Create New</a>
</p>
@using (Html.BeginForm("Index", "Departments", FormMethod.Get))
{
    <p class="info">
        Search for department: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <!--search box/ this will make a box where the user can enter whatever they want to search-->
        <input type="submit" value="Search" />
        <!--this will submit whatever the user is searching-->
        <a asp-action="Index">Back to Full List</a>
        <!--the text "Back to Full List" will be the link to reset the search-->
    </p>
}
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.ActionLink("Department Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
            </th>
            <!--this will be the name of the column and the link to sort the department name in descending order-->
            <th>
                Picture
            </th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.DepartmentName)
            </td>
                <td>
                    <img src="@("~/images/"+item.ImageName)" asp-append-version="true" width="75px" height="75px" />
                </td> 
                <!--this will give the user the option to upload an image-->
            <td>
                <a asp-action="Edit" asp-route-id="@item.DepartmentID">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.DepartmentID">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.DepartmentID">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}
<!--paging button. The previous and next buttons,
if the previous or next page isnt available, that button will be disabled-->
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default gree info @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default gree info @nextDisabled">
    Next
</a> 